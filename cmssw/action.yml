name: 'Test CMSSW integration'
description: 'Builds and tests the integration of LST into CMSSW'
inputs:
  pr-number:
    description: 'PR number'
    required: true
  cmssw-branch:
    description: 'The branch of the CMSSW repo that should be tested'
    required: true
outputs:
  archive-repo:
    description: "The repository where the plots will be stored"
    value: ${{ steps.output-vars.outputs.archive-repo }}
  archive-branch:
    description: "The branch of the repository where the plots will be stored"
    value: ${{ steps.output-vars.outputs.archive-branch }}
  archive-dir:
    description: "The directory containing the data that will be stored"
    value: ${{ steps.output-vars.outputs.archive-dir }}
  comment:
    description: "The comment that to leave in the PR if the test passes"
    value: ${{ steps.output-vars.outputs.comment }}
runs:
  using: 'composite'
  steps:
    - name: Copy script to workspace
      run: cp ${{ github.action_path }}/run.sh ${{ github.workspace }}
      shell: bash
    - name: Set output variables
      id: output-vars
      shell: bash
      run: |
        ARCHIVE_REPO=${{ github.repository_owner }}/TrackLooper-plots-archive
        echo "archive-repo=$ARCHIVE_REPO" >> $GITHUB_OUTPUT
        ARCHIVE_BRANCH=cmssw
        echo "archive-branch=$ARCHIVE_BRANCH" >> $GITHUB_OUTPUT
        ARCHIVE_DIR=PR${{ inputs.pr-number }}_$(git rev-parse --short HEAD)_cmssw
        echo "archive-dir=$ARCHIVE_DIR" >> $GITHUB_OUTPUT
        COMMENT=$(cat <<EOF
        The PR was built and ran successfully with CMSSW. Here are some plots.
        <table>
          <tr>
            OOTB All Tracks
            <td><img src="https://raw.githubusercontent.com/$ARCHIVE_REPO/$ARCHIVE_BRANCH/$ARCHIVE_DIR/effandfakePtEtaPhi.png" alt="Efficiency and fake rate vs pT, eta, and phi"></td>
          </tr>
        </table>

        The full set of validation and comparison plots can be found [here](https://github.com/$ARCHIVE_REPO/tree/$ARCHIVE_BRANCH/$ARCHIVE_DIR).
        EOF
        )
        {
          echo "comment<<EOF"
          echo "$COMMENT"
          echo EOF
        } >> $GITHUB_OUTPUT
        echo "RUNNER_UID=$(id -u)" >> $GITHUB_ENV
        echo "RUNNER_GID=$(id -g)" >> $GITHUB_ENV
    - name: Mount cvmfs
      uses: cvmfs-contrib/github-action-cvmfs@v4
      # For some reason we need to interact with cmssw before using it in Docker because otherwise it fails
    - name: List files in cvmfs to get it started
      run: ls /cvmfs/cms.cern.ch/ > /dev/null
      shell: bash
    - name: Remove some pre-installed software
      shell: bash
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
    - name: Get PR target branch
      id: get_target_branch
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          const { data: pullRequest } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: "cmssw",
            pull_number: "${{ inputs.pr-number }}",
          });
          return pullRequest.base.ref;
    - name: Build and run in Docker container
      uses: addnab/docker-run-action@v3
      with:
        image: ariostas/el8:cmssw
        shell: bash
        options: >
          -v ${{ github.workspace }}:/home/TrackLooper
          -v /cvmfs/cms.cern.ch:/cvmfs/cms.cern.ch
          -w /home/TrackLooper
          -e ARCHIVE_DIR=${{ steps.output-vars.outputs.archive-dir }}
          -u ${{ env.RUNNER_UID }}:${{ env.RUNNER_GID }}
          -e PR_NUMBER=${{ inputs.pr-number }}
          -e TARGET_BRANCH=${{ steps.get_target_branch.outputs.result }}
        run: ./run.sh
